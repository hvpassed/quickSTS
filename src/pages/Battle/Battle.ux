<!-- <import name="card" src="../../assets/uxs/card/card.ux"></import> -->
<import name="cards" src="../../assets/uxs/card/cards.ux"></import>
<import name="btn" src="../../assets/uxs/button/HexagonalButton.ux"></import>
<import name="enemy" src="../../assets/uxs/enemy/enemy.ux"></import>
<import name="hpbar" src="../../assets/uxs/others/HpBar.ux"></import>
<import name="card" src="../../assets/uxs/card/card.ux"></import>
<import name="player" src="../../assets/uxs/player/player.ux"></import>
<import name="cardLayer" src="../../assets/uxs/CardCoverLayer/CardCoverLayer.ux"></import>
<!-- <import name="WinLayer" src="../../assets/uxs/CardCoverLayer/WinTurnLayer.ux"></import>
  -->
   
 
 
<template>
  <div class="wrapper">
    <div if=false class="fm" style="position:fixed;width:200px;height:200px;">
      <input  type="text" model:value="{{selectName}}" onchange="textinput()"></input>
      <input  type="button" value="登录" onclick="nameSend"/>
    </div>
    <player prop-player={{Player}} class="playerblock"></player>
    <image src="../../assets/images/button/base1.png" id="drawPile" onclick="drawPileShow"></image>
    <image src="../../assets/images/button/base2.png" id="dicordPile" onclick="dicordPileShow"></image>
    <!--text>123</text-->
    <div class="EnergyBadge">
      <text class="energy">{{ NowEnergy }}/{{ Player.MaxEnergy }}</text>
    </div>
    <div class="Enemies" style="position: absolute; top: 400px">
      <enemy
        for="value in enemiesProps"
        width="200"
        height="200"
        prop-enemy="{{value}}"
        onenemy-select="handleSelectingEnemy"
        prop-select-enemy="{{SelectEnemy}}"

      ></enemy>
    </div>

    <cards
      class="cardsHand"
      card-paras="{{cards}}"
      oncard-clickd="handleCardClicked"
      oncards-seleting="handlecardSelecting"
      prop-sended="sending"
    ></cards>
    <btn
      class="sendCardBtn"
      prop-text="出牌"
      prop-style="{{btn1Style}}"
      onclick="sendBtnClicked"
    ></btn>
    <btn
      class="endTurnBtn"
      prop-text="结束回合"
      prop-style="{{btn1Style}}"
      onclick="endTurn"
    ></btn>
    <!-- <image class="btn" src="../../assets/images/button/buttonL.png"></image> -->
    <cardLayer if="{{drawPileShowing}}" prop-cards="{{drawCards}}"  onclick="closeDrawPileShow">

    </cardLayer>
    <cardLayer  if="{{dicordPileShowing}}" prop-cards="{{discordCards}}" onclick="closeDicordPileShow">
    </cardLayer>
    <!-- <WinLayer class="winlayer" if={{won}} prop-can-select-cards={{canSelectCards}} prop-all-cards={{allCards}}></WinLayer> -->
  </div>
</template>
<script>
import audio from '@system.audio'
import global from "../../helper/global.js";
import fetch from '@system.fetch' 
import router from '@system.router'
import vibrator from '@system.vibrator'
export default {
  data() {
    return {
      allCards:[],
      canSelectCards:[],
      TARGET_TYPE:{
        SINGLE:1,
        SELF:0,
        ALL:2
      },
      won:false,
      singlecardid:0,
      initParams:null,
      drawPileShowing:false,
      dicordPileShowing:false,
      testvar:false,
      SelectEnemy: null,
      Player: {
        MaxHp: 100,
        NowHp: 100,
        NowBlock:40,
        MaxEnergy: 3,
      },
      enemiesProps: //[{id,monsterid,MaxHp,NowHp,NowBlock,intent,name,description}]
      [],
      NowEnergy: 3,
      selected: null,
      sending: null,
      btn1Style: {
        height: 81,
        width: 234,
        fontSize: 36
      },
      cardIdMapAttribute:{},//cardid 对应属性（对象）,cards里边只存储，一些描述id:{"cardid","title","description","cost"，"select"}
      cards:[], //[{id,cardid,width,cardName,cardCost,cardDc}]
      drawCards:[],
      discordCards:[],
      selectName:"",
    };
  },
  onInit() {
    audio.src="http://10.129.5.123:2019/STS_Level1-2_v2.mp3"
    audio.loop=true
    router.clear();
    //console.log(this.initParams)
    this.initParams = JSON.parse(this.initParams)
    //[{id,monsterid,MaxHp,NowHp,NowBlock,name,description}]
    let i = 0;
    let that = this;
    this.Player = {
        MaxHp:  this.initParams["battle_player"].maxhp,
        NowHp: this.initParams["battle_player"].nowhp,
        NowBlock:this.initParams["battle_player"].block,
        MaxEnergy:this.initParams["battle_player"].cost
    };
    let intentObjs = this.initParams["intents"];
    this.initParams["monsters"].forEach(element => {
        let e1 = element;

        intentObjs.forEach(e2=>{
          //console.log(e1,e2)
          if(e1.monsterid==e2.monsterid)
          that.enemiesProps.push({
            id:i,
            monsterid:e1.monsterid,
            MaxHp:e1.maxhp,
            NowHp:e1.nowhp,
            NowBlock:e1.block,
            name:e1.name,
            description:e1.description,
            intent:that.intentParse(e2)
          })
        })
      i+=1;
    });
    //console.log(that.enemiesProps)
    fetch.fetch({
      url:this.$app.$def.url+":20002/battle/getCardsByIdMap",
      method:"POST",
      header:{
        "Content-Type":"application/json"
      },
      data:{
        "cardidsmap":this.initParams["battle_player"]["all_pile"]
      },
    }).then(Response=>{
      
      //console.log(Response)
      var data = JSON.parse(Response.data.data)
      var cardsObjs = data.data;
      cardsObjs.forEach(el=>{
        that.cardIdMapAttribute[el.cardid] = el;
      })

      var handPile = JSON.parse(this.initParams["battle_player"]["hand_pile"])["Array"]
      var drawPile = JSON.parse(this.initParams["battle_player"]["draw_pile"])["Array"]
      var discordPile = JSON.parse(this.initParams["battle_player"]["discord_pile"])["Array"]

      handPile.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        that.cards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
      })

      drawPile.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        that.drawCards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
      })
      //console.log(that.drawCards)
      discordPile.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        that.discordCards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
      })
    //console.log(that.discordCards)
      that.NowEnergy = that.Player.MaxEnergy;
    }).catch(Error=>{
      console.error(Error)
    })
    
    //this.initParams[""];
    audio.play()

  
  
  },
  handlecardSelecting(e) {
    this.selected = e.detail.id;

  },
  sendCards(id) {
    vibrator.vibrate({
      mode: 'short'
    })
    if(id==null)return;
    let cardObj = null;
    let that = this;
    this.cards.forEach(el=>{
      if(el.id==id){
        cardObj = that.cardIdMapAttribute[el.cardid];
      }
    })
    if(this.NowEnergy>=cardObj.cost){
      
      //console.log(this.SelectEnemy)
      if(cardObj.select==1 && this.SelectEnemy==null){
        return;
      }
      this.NowEnergy+=-cardObj.cost;
      this.sendCardsById(id);

    }
  },
  sendCardsById(id) {
    let that = this;
    //发送卡牌
    var cardParas = this.cardStringsConstructFromCardsPile();
    var targetMonsterid=null;
    if(this.SelectEnemy!=null){
      for(var i = 0;i<this.enemiesProps.length;i++){
        if(this.SelectEnemy==this.enemiesProps[i].id)
        {
          targetMonsterid=this.enemiesProps[i].monsterid;
        }
      } 
    }

    var sendData = {
      userid:this.$app.$def.UserData.UserId,
      index:id,
      target_monsterid:targetMonsterid,
      hand_card_ids:cardParas["hand_card_ids"],
      draw_card_ids:cardParas["draw_card_ids"],
      discord_card_ids:cardParas["discord_card_ids"],//可以从数据库中读取
      hand_ids:cardParas["hand_ids"],
      draw_ids:cardParas["draw_ids"],
      discord_ids:cardParas["discord_ids"]
    };
    fetch.fetch({
      url:this.$app.$def.url+":20002/battle/playCards",
      method:"POST",
      header:{
        "Content-Type":"application/json"
      },
      data:sendData,
    }).then(Response=>{
      
      var data = JSON.parse(Response.data.data).data

      var aHandCards = data.handCardids
      var aDrawCards = data.drawCardids
      var aDiscordCards= data.discordCardids
      that.resetCards(aHandCards,aDrawCards,aDiscordCards);
      if(data.target_type==that.TARGET_TYPE.SINGLE){
        var monsters = [data.monster];
        that.resetMonsters(monsters);
      }else if(data.target_type==that.TARGET_TYPE.ALL){
        //暂时还没有

        var monsters = data.monsters;
        that.resetMonsters(monsters);
      }else if(data.target_type==that.TARGET_TYPE.SELF){
        var playerObj = data.battle_player;
        that.resetPlayer(playerObj);
      }
      var flag =true;
      that.enemiesProps.forEach(element=>{

        if(element.NowHp>0){

          flag=false;
        }
      })
      if(flag){
        that.winGame();
      }


    }).catch(Error=>{
      console.error(Error)
    })

    //this.cards = this.del(this.cards, id)
  },
  nameSend(func_name){
    let func_select = null;
    let that =this;
    
    //cards:[], //[{id,cardid,width,cardName,cardCost,cardDc}]
    this.cards.forEach((element) => {
      if(element.cardName==func_name){
        if(func_select==null){
          func_select=element.id;
        }
 
      }
    })
    if(func_select){
      this.sendCards(func_select)
    }
  },
  resetPlayer(playerObj){
      //     Player: {
      //   MaxHp: 100,
      //   NowHp: 100,
      //   NowBlock:40
      // },
    this.Player.MaxHp = playerObj.maxhp;
    this.Player.NowHp = playerObj.nowhp;
    this.Player.NowBlock = playerObj.block;
    this.Player.MaxEnergy = playerObj.cost;
  },
  resetCards(aHandCardids,aDrawCardids,aDiscordCardids){
    //cards,drawCards,discordCards
    let that = this;

    this.cards=[];
    this.drawCards=[];
    this.discordCards=[];
    aHandCardids.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        that.cards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
    });

    aDrawCardids.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        that.drawCards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
    });


    aDiscordCardids.forEach(element=>{
        var cardobj = that.cardIdMapAttribute[element];
        
        that.discordCards.push({
            id:that.singlecardid,
            cardid:cardobj.cardid,
            width:150,
            cardName:cardobj.title,
            cardCost:cardobj.cost,
            cardDc:cardobj.description
        })
        that.singlecardid+=1;
    });

    

  },
  resetMonsters(monsters){
    //enemiesProps: //[{id,monsterid,MaxHp,NowHp,NowBlock}]
    let that = this;
    monsters.forEach(element=>{

      for(var i = 0;i<that.enemiesProps.length;i++){

        if(element.monsterid == that.enemiesProps[i].monsterid){

          //console.log(element,that.enemiesProps[i])


          that.enemiesProps[i].monsterid=element.monsterid
          that.enemiesProps[i].MaxHp=element.maxhp
          that.enemiesProps[i].NowHp=element.nowhp

          //console.log(that.enemiesProps[i])
          that.enemiesProps[i].NowBlock=element.block

        }
      }
    })


  },
  cardStringsConstructFromCardsPile(){
    //从手牌数组创建字符串型，手牌数组
    let that = this;
    let ret = {};
    let handCardids = "[";
    let handIds = "[";
    let flag = true;
    for(var i = 0;i<this.cards.length;i++){
      handCardids+=this.cards[i].cardid;
      handIds += this.cards[i].id;
      if(i!=this.cards.length-1){
        handCardids+=",";
        handIds+=",";
      }else{
        handCardids+="]";
        handIds+="]";
        flag = false;
      }
    }
    if(flag){
      handCardids+="]";
      handIds+="]";
      
    }
    flag =true;

    ret["hand_card_ids"] = handCardids;
    ret["hand_ids"] = handIds;



    let drawCardids = "[";
    let drawIds = "[";

    for(var i = 0;i<this.drawCards.length;i++){
      drawCardids+=this.drawCards[i].cardid;
      drawIds += this.drawCards[i].id;
      if(i!=this.drawCards.length-1){
        drawCardids+=",";
        drawIds+=",";
      }else{
        drawCardids+="]";
        drawIds+="]";
        flag = false;
      }
    }
    if(flag){
      drawCardids+="]";
      drawIds+="]";
      
    }
    flag =true;
    ret["draw_card_ids"] = drawCardids;
    ret["draw_ids"] = drawIds;

    let discordCardids = "[";
    let discordIds = "[";
    for(var i = 0;i<this.discordCards.length;i++){
      discordCardids+=this.discordCards[i].cardid;
      discordIds += this.discordCards[i].id;
      if(i!=this.discordCards.length-1){
        discordCardids+=",";
        discordIds+=",";
      }else{
        discordCardids+="]";
        discordIds+="]";
        flag = false;
      }
    }
    if(flag){
      discordCardids+="]";
      discordIds+="]";
      
    }
    flag =true;
    ret["discord_card_ids"] = discordCardids;
    ret["discord_ids"] = discordIds;

    return ret;

  },
  del(arr, id) {
    let sid = id;
    arr = arr.filter(element => element.id != sid);
    //console.log(arr)
    return arr;
  },
  sendBtnClicked() {

    if (this.selected != null) {
      
      this.sendCards(this.selected)
      this.sending = true;

      this.sending = null;
      this.selected = null
    }
    this.SelectEnemy=null;
  },
  handleSelectingEnemy(e) {
    this.SelectEnemy = e.detail.id;
  },
  test() {
    //this.NowHp -= 10;
    // this.testvar=true;

    this.enemiesProps[0].NowHp-=10
  },
  drawPileShow(){
    this.drawPileShowing=true;
  },
  dicordPileShow(){
    this.dicordPileShowing=true;
  },
  closeDrawPileShow(){
    this.drawPileShowing=false;
  },
  closeDicordPileShow(){
    this.dicordPileShowing=false;
  },
  intentParse(aIntent){
    var ret = {
      attack:false,
      defend:false,
      skill:false,
      text:0,

    }
    if(aIntent.aim==="ATTACK")
    {

      ret.attack=true;
      if(aIntent.attack_amount==1){
        ret.text = aIntent.attack;

      }else{
        ret.text = aIntent.attack_amount+ "×"+  aIntent.attack ;
      }
      
    }else if(aIntent.aim==="DEFEND"){
      ret.defend=true;
      ret.text = aIntent.defend;
    }else{
      ret.skill=true;
      ret.text = "";
    }
    return ret;
  },
  winGame(){
    console.log("win")
    let that = this;
    // this.won=true;
    fetch.fetch({
      url:this.$app.$def.url+":20002/battle/winBattle",
      method:"POST",
      header:{
        "Content-Type":"application/json"
      },
      data:{
        "userid":that.$app.$def.UserData.UserId
      },
    }).then(Response=>{
      var data = JSON.parse(Response.data.data).data
      //console.log(data);
      var ac = data.AllCards;
      var sc =data.SelectCards;
      var isWin = data.win;
      if(isWin){
        fetch.fetch({
          url:this.$app.$def.url+":20002/battle/totalWin",
          method:"POST",
          header:{
            "Content-Type":"application/json"
          },
          data:{
            "userid":that.$app.$def.UserData.UserId,
            "mapid":that.$app.$def.globalData.mapid
          },
        }).then(Response2=>{
 
          let playerData = JSON.parse(Response2.data.data).data
          let cardPlayed = playerData.cardplay
          let damageout = playerData.damageout
          let damagerecive = playerData.damagerecive;
          
          router.replace({
            uri:"/pages/WinPage",
            params:{
              text:"恭喜!\n共出牌:"+cardPlayed+"张\n共造成伤害:"+damageout+"\n共收到伤害:"+damagerecive,
              win:true
          }
        })
        })

      }
      else{
        var i=0;
        ac.forEach(element=>{
          that.allCards.push({
            id:i,
            cardid:element.cardid,
            width:150,
            cardName:element.title,
            cardCost:element.cost,
            cardDc:element.description
          })
          i+=1;
        })
        i=0;
        sc.forEach(element=>{
          that.canSelectCards.push({
            id:i,
            cardid:element.cardid,
            width:150,
            cardName:element.title,
            cardCost:element.cost,
            cardDc:element.description
          })
          i+=1
        })
        //console.log(that.allCards)
        //console.log(that.canSelectCards)
        that.$app.$def.CardData.allCards = that.allCards;
        that.$app.$def.CardData.canSelectCards=that.canSelectCards;
        router.replace({
          uri:"/pages/winGame",

        })
      }


    }).catch(Error=>{
      console.error(Error)
    })
  },
  endTurn(){
    vibrator.vibrate({
      mode: 'short'
    })
 
    let that = this;
    fetch.fetch({
      url:this.$app.$def.url+":20002/battle/endTurn",
      method:"POST",
      header:{
        "Content-Type":"application/json"
      },
      data:{
        "userid":this.$app.$def.UserData.UserId,
      },
    }).then(Response=>{
      var data = JSON.parse(Response.data.data).data;
      that.resetCards(data.handPile,data.drawPile,data.discordPile);
      //console.log(data);
      //抽牌结束
      that.resetPlayer(data.battle_player);
      //console.log(data.battle_player);
      if(data.battle_player.nowhp<=0){
        that.loseGame();
      }
      that.NowEnergy = that.Player.MaxEnergy;
      that.resetMonsters(data.monsters);
      that.resetIntent(data.intents);

    }).catch(Error=>{
      console.error(Error);
    })
  },
  resetIntent(intents){
    let that = this;
    this.enemiesProps.forEach(element=>{
      if(element.NowHp>0){
      element.intent = that.intentParse(intents[element.monsterid]);
      }
    })
    
  },
  loseGame(){
    console.log("Lose");
    fetch.fetch({
      url:this.$app.$def.url+":20002/battle/lostGame",
      method:"POST",
      header:{
        "Content-Type":"application/json"
      },
      data:{
        "userid":this.$app.$def.UserData.UserId,
      },
    }).then(Response=>{
      router.replace({
        uri:"/pages/WinPage",
        params:{
          text:"游戏结束"
        }
      })
    }).catch(Error=>{
      console.error(Error);
    })
  },
  textinput(e){
    this.selectName = e.text;
  },
}
</script>
<style>
.wrapper {
  position: relative;
  background-image: url('../../assets/images/battlescence/BattleScence1.jpg');
}
.playerblock{
  position: absolute;
  top:900px;
  left: 30px;
}
.Enemies {
  width: 750px;
  display: flex;

  flex-direction: row;
  justify-content: space-around;
}

.cardsHand {
  position: absolute;
  bottom: 0px;
  left: 0px;

  /* background-color:rgba(255, 255, 255, 0.7); */
  border-radius: 8px;
  border: 1px solid #E3E5E7;

}
.endTurnBtn {
  position: absolute;
  bottom: 300px;
  left: -234px;
}
.sendCardBtn {
  position: absolute;
  right: 0px;
  bottom: 300px;
}

.EnergyBadge {
  position: fixed;
  border: 3px solid rgba(0, 0, 0, 0.8);
  right: 30px;
  bottom: 500px;
  background-color: #116f54;
  height: 100px;
  width: 100px;
  transform: rotate(45deg);
}
.energy {
  width: 100px;
  text-align: center;
  font-size: 40px;
  transform: rotate(-45deg);
}
#drawPile{
  position: absolute;
  top: 100px;
  left:0px;
}
#dicordPile{
  position: absolute;
  top: 100px;
  right: 0px;
}
#drawcoverLayer{
  position: fixed;
  height: 100%;
  width: 100%;
  background-color:rgba(0, 0, 0,0.7);
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  flex-wrap: wrap;
  align-items: flex-start;
  align-content: space-around;
}
#dicordcoverLayer{
  position: fixed;
  height: 100%;
  width: 100%;
  background-color:rgba(0, 0, 0,0.7);
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  flex-wrap: wrap;
  align-items: flex-start;
  align-content: space-around;
}
.winlayer{
  position: fixed;
  height: 100%;
  width:100%;
}
</style>