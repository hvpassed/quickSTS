<template>
    <div class="wrapper">
        
        <canvas class="bg" id="bgcanvas"  onclick="startGame"></canvas>    
        <!--image class="bg img" src="../../assets/images/map/mapMid.png"></image-->    
    </div>
</template>

<script>
import graph from "../../helper/graph"
import fetch from '@system.fetch' 
import router from '@system.router'
import audio from '@system.audio'
export default{
    data(){
        return {
            curPos:[-1,0],
            monstericon:null,
            firstInit:true,
            mapSeed:null,
            clickEnable:false,
            mapEndPos:[-2,0]
        }
    },
    onInit() {
        audio.src='http://10.129.5.123:2019/STS_Shrine_NewMix_v1.ogg'
        audio.loop=true
        audio.play()
    },
    onReady() {

    },
    onShow() {
        let that = this;
        this.curPos=this.$app.$def.globalData.curPos

        if(this.$app.$def.PlayerData.playing==1){
            fetch.fetch({
                url:this.$app.$def.url+":20002/battle/existBattle",
                method:"POST",
                header:{
                    "Content-Type":"application/json"
                },
                data:{
                    "userid":this.$app.$def.UserData.UserId,
                },
            }).then(Response=>{
                var data = JSON.parse(Response.data.data).data;
                //console.log("data:",data);
                if(data.existBattle==0){
                    that.curPos = JSON.parse(data.curpos);
                    that.mapSeed = data.seed
                    that.$element('bgcanvas').getBoundingClientRect({
                        success:(data)=>{
                            //console.log("curpos:",that.curPos)
                            if(that.firstInit){
                                graph.init(5,5,data.width,data.height,30,that.$app.$def.globalData.graphSeed);
                            }
                            else{
                                graph.init(5,5,data.width,data.height,30,that.mapSeed);
                            }
                            that.$app.$def.globalData.graph = graph
                            if(that.firstInit){
                                var endPos = "["+(graph.data.levels-1)+",0]"
                                
                                fetch.fetch({
                                    url:this.$app.$def.url+":20002/map/setEndPos",
                                    method:"POST",
                                    header:{
                                        "Content-Type":"application/json"
                                    },
                                    data:{
                                        "userid":this.$app.$def.UserData.UserId,
                                        "endPos":endPos
                                    },
                                }).then(Response=>{
                                    //console.log(Response)
                                    that.mapEndPos=[(graph.data.levels-1),0]
                                }).catch(Error=>{
                                    console.error(Error)
                                })
                            }
                            //console.log(graph)
                            //检查是否在战斗
                            that.drawMap();
                            that.clickEnable=true;
                        }
                    })
                }else{
                    fetch.fetch({
                        url:this.$app.$def.url+":20002/battle/reInitBattle",
                        method:"POST",
                        header:{
                            "Content-Type":"application/json"
                        },
                        data:{
                            "userid":this.$app.$def.UserData.UserId,
                        },

                    }).then((Response)=>{
                        //console.log(Response);
                        var data = JSON.parse(Response.data.data).data;
                        //console.log(data);
                        router.replace({uri:"/pages/Battle",params:{initParams:data}});
                    }).catch(e=>{
                        console.error(e)
                    })
                }
            }).catch(Error=>{
                console.error(Error)
            })




        }else{
            that.$element('bgcanvas').getBoundingClientRect({
                success:(data)=>{
                    console.log("curpos:",that.curPos)
                    if(that.firstInit){
                        graph.init(5,5,data.width,data.height,30,that.$app.$def.globalData.graphSeed);
                    }
                    else{
                        graph.init(5,5,data.width,data.height,30,that.mapSeed);
                    }
                    that.$app.$def.globalData.graph = graph
                    if(that.firstInit){
                        var endPos = "["+(graph.data.levels-1)+",0]"
                        fetch.fetch({
                            url:this.$app.$def.url+":20002/map/setEndPos",
                            method:"POST",
                            header:{
                                "Content-Type":"application/json"
                            },
                            data:{
                                "userid":this.$app.$def.UserData.UserId,
                                "endPos":endPos
                            },
                        }).then(Response=>{
                            //console.log(Response)
                            that.mapEndPos=[(graph.data.levels-1),0]
                        }).catch(Error=>{
                            console.error(Error)
                        })
                    }
                    //console.log(graph)
                    //检查是否在战斗
                    that.drawMap();
                    that.clickEnable=true;
                }
            })
        }


        
    },
    
    drawMap(){
        let canvas = this.$element('bgcanvas');
        let ctx = canvas.getContext('2d');
        var g = this.$app.$def.globalData.graph;
        var children = graph.child(this.curPos[0],this.curPos[1])
        if(this.curPos[0]!=-1){
            this.drawCicle(ctx,g.data.Pos[-1][-1+"-"+0][1],g.data.Pos[-1][-1+"-"+0][0],g.data.Pos[-1][-1+"-"+0][2]);
        }
        else{
            this.drawCicleRed(ctx,g.data.Pos[-1][-1+"-"+0][1],g.data.Pos[-1][-1+"-"+0][0],g.data.Pos[-1][-1+"-"+0][2]);
        }

        for(var i = 0;i<g.data.levels;i++){
            for(var j = 0;j<g.data.graph[i].length;j++){
                var ls = g.data.graph[i][i+"-"+j];
                var poss =g.data.Pos[i][i+"-"+j];
                if(i==this.curPos[0] &&j==this.curPos[1])
                {
                    this.drawCicleRed(ctx,poss[1],poss[0],poss[2]);
                    
                }else{
                    var flag = true;
                    for(var l = 0;l<children.length;l++){
                        if(children[l][0]==i && children[l][1]==j){
                            this.drawCicleBlue(ctx,poss[1],poss[0],poss[2]);
                            flag=false;
                            break;
                        }
                    }
                    if(flag){
                        this.drawCicle(ctx,poss[1],poss[0],poss[2]);
                    }
                }
                
                for(var k=0,pos=2;k<ls[1];k++,pos++){
                    var preName = ls[pos];
                    var prePos = g.data.Pos[i-1][preName];
                    var startX=prePos[1],startY=prePos[0];
                    var endX = poss[1],endY=poss[0];
                    //console.log([startX,startY,endX[1],endY[0]])
                    this.drawLine(ctx,startX,startY,endX,endY);
                }
            }
        }
    },
    drawLine(ctx,x,y,ex,ey){
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.setLineDash([5, 5]); // 数组中的值表示实线和空白的像素数
        ctx.lineTo(ex, ey);
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.setLineDash([]);
        ctx.closePath();
    },
    drawCicleBlue(ctx,centerX,centerY,radius){
        ctx.beginPath();

        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.strokeStyle = "blue";
        ctx.lineWidth = 2;

        ctx.stroke();
        ctx.closePath();
    },
    drawCicleRed(ctx,centerX,centerY,radius){
        ctx.beginPath();

        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.strokeStyle = "red";
        ctx.lineWidth = 2;

        ctx.stroke();
        ctx.closePath();
    },
    drawCicle(ctx,centerX,centerY,radius){

        ctx.beginPath();

        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;

        ctx.stroke();
        ctx.closePath();
    },
    startGame(e){
        if(this.clickEnable){
            let that = this;
            //console.log(this.mapEndPos)
            var selectd =  this.handleClick(e)
            var news = this.curPos[0]+"-"+this.curPos[1]
            if(selectd){

                var flagIn = false;
                for(var i = 2;i<selectd[1].length;i++){
                    if(selectd[1][i]===news){
                        flagIn=true;
                    }
                }
                if(flagIn){
                    console.log("start game")

                    let enterPos = "["+selectd[0][0]+","+selectd[0][1]+"]"
                    //console.log(enterPos)
                    if(selectd[0][0]==that.mapEndPos[0]&&selectd[0][1]==that.mapEndPos[1]){
                        fetch.fetch({
                            url:this.$app.$def.url+":20002/battle/initBattleBoss",
                            method:"POST",
                            header:{
                                "Content-Type":"application/json"
                            },
                            data:{
                                "userid":this.$app.$def.UserData.UserId,
                                "mapid":this.$app.$def.globalData.mapid,
                                "enter_pos":enterPos,
                            },

                        }).then((Response)=>{
                            //console.log(Response);
                            var data = JSON.parse(Response.data.data).data;
                            //console.log(data);
                            router.replace({uri:"/pages/Battle",params:{initParams:data}});
                        }).catch(e=>{
                            console.error(e)
                        })
                    }else{
                        fetch.fetch({
                            url:this.$app.$def.url+":20002/battle/initBattle",
                            method:"POST",
                            header:{
                                "Content-Type":"application/json"
                            },
                            data:{
                                "userid":this.$app.$def.UserData.UserId,
                                "mapid":this.$app.$def.globalData.mapid,
                                "enter_pos":enterPos,
                            },

                        }).then((Response)=>{
                            //console.log(Response);
                            var data = JSON.parse(Response.data.data).data;
                            //console.log(data);
                            router.replace({uri:"/pages/Battle",params:{initParams:data}});
                        }).catch(e=>{
                            console.error(e)
                        })
                    }

                    
                }
            }
        }
    },
    handleClick(e){
        var ret = null;
        var flag = true;
        //console.log(e);
        var clickX=e.offsetX,clickY=e.offsetY;
        graph.first();
        while(true){
            var obj = graph.next();
            if(!obj){
                break;
            }
            var cy = obj[2][0],cx=obj[2][1],radius=obj[2][2];

            if(((cx-clickX)**2+(cy-clickY)**2)<=radius**2){
                //console.log(obj);
                ret = obj;
                flag=false;
                break;
            }
        }
        if(flag){
            console.log("none")
        }
        return ret;
        
    },
}
</script>
 
<style>
.wrapper{
    position: relative;
}
.bg{
    position:relative;
    width: 750px;
    height: 2000px;
    top:0px;
    left: 0px;
    background-image:url("../../assets/images/map/bk.png");
    background-size:contain;
    background-repeat:repeat-y;
    /*overflow: hidden;*/
}
/* .img{
    position:relative;
    width: 750px;
    height: 2000px;
    top:0px;
    left: 0px;
    z-index: -1;
} */
</style>