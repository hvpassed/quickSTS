<template>
    <div class="wrapper">
        
        <canvas class="bg" id="bgcanvas"  onclick="handleClick"></canvas>    
        <!--image class="bg img" src="../../assets/images/map/mapMid.png"></image-->    
    </div>
</template>

<script>
import graph from "../../helper/graph"
export default{
    data(){
        return {
            curPos:[0,0],
        }
    },
    onInit() {
      
    },
    onReady() {

    },
    onShow() {
        let that = this;

        this.$element('bgcanvas').getBoundingClientRect({
            success:(data)=>{

                graph.init(5,5,data.width,data.height,30,that.$app.$def.UserData.UserId);
                that.$app.$def.globalData.graph = graph
                console.log(graph)
                that.drawMap();
            }
        })
        
    },
    drawMap(){
        let canvas = this.$element('bgcanvas');
        let ctx = canvas.getContext('2d');
        var g = this.$app.$def.globalData.graph;
        this.drawCicle(ctx,g.data.Pos[-1][-1+"-"+0][1],g.data.Pos[-1][-1+"-"+0][0],g.data.Pos[-1][-1+"-"+0][2]);
        for(var i = 0;i<g.data.levels;i++){
            for(var j = 0;j<g.data.graph[i].length;j++){
                var ls = g.data.graph[i][i+"-"+j];
                var poss =g.data.Pos[i][i+"-"+j];
                this.drawCicle(ctx,poss[1],poss[0],poss[2]);
                //console.log(pos)
                for(var k=0,pos=2;k<ls[1];k++,pos++){
                    var preName = ls[pos];
                    var prePos = g.data.Pos[i-1][preName];
                    var startX=prePos[1],startY=prePos[0];
                    var endX = poss[1],endY=poss[0];
                    //console.log([startX,startY,endX[1],endY[0]])
                    this.drawLine(ctx,startX,startY,endX,endY);
                }
            }
        }
    },
    drawLine(ctx,x,y,ex,ey){
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.setLineDash([5, 5]); // 数组中的值表示实线和空白的像素数
        ctx.lineTo(ex, ey);
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.setLineDash([]);
        ctx.closePath();
    },
    drawCicle(ctx,centerX,centerY,radius){

        ctx.beginPath();

        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;

        ctx.stroke();
        ctx.closePath();
    },
    handleClick(e){
        var ret = null;
        var flag = true;
        console.log(e);
        var clickX=e.offsetX,clickY=e.offsetY;
        graph.first();
        while(true){
            var obj = graph.next();
            if(!obj){
                break;
            }
            var cy = obj[2][0],cx=obj[2][1],radius=obj[2][2];
            //console.log(cx,cy);
            //console.log((cx-clickX)**2+(cy-clickY)**2);
            if(((cx-clickX)**2+(cy-clickY)**2)<=radius**2){
                console.log(obj);
                ret = obj;
                flag=false;
                break;
            }
        }
        if(flag){
            console.log("none")
            
        }
        return ret;
        
    },
}
</script>
 
<style>
.wrapper{
    position: relative;
}
.bg{
    position:relative;
    width: 750px;
    height: 2000px;
    top:0px;
    left: 0px;
    background-image:url("../../assets/images/map/midbg.png");
    background-size:contain;
    background-repeat:repeat-y;
    /*overflow: hidden;*/
}
/* .img{
    position:relative;
    width: 750px;
    height: 2000px;
    top:0px;
    left: 0px;
    z-index: -1;
} */
</style>